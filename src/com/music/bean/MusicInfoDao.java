package com.music.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "l_music".
*/
public class MusicInfoDao extends AbstractDao<MusicInfo, Long> {

    public static final String TABLENAME = "l_music";

    /**
     * Properties of entity MusicInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SongId = new Property(0, long.class, "songId", true, "songId");
        public final static Property AlbumId = new Property(1, int.class, "albumId", false, "albumId");
        public final static Property Album = new Property(2, String.class, "album", false, "album");
        public final static Property Duration = new Property(3, int.class, "duration", false, "duration");
        public final static Property Title = new Property(4, String.class, "title", false, "title");
        public final static Property Artist = new Property(5, String.class, "artist", false, "artist");
        public final static Property PlayPath = new Property(6, String.class, "playPath", false, "playPath");
        public final static Property Folder = new Property(7, String.class, "folder", false, "folder");
        public final static Property TitleKey = new Property(8, String.class, "titleKey", false, "titleKey");
        public final static Property ArtistKey = new Property(9, String.class, "artistKey", false, "artistKey");
        public final static Property PicUrl = new Property(10, String.class, "picUrl", false, "picUrl");
        public final static Property DownUrl = new Property(11, String.class, "downUrl", false, "downUrl");
        public final static Property Tag = new Property(12, int.class, "tag", false, "tag");
    }


    public MusicInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MusicInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"l_music\" (" + //
                "\"songId\" INTEGER PRIMARY KEY NOT NULL ," + // 0: songId
                "\"albumId\" INTEGER NOT NULL ," + // 1: albumId
                "\"album\" TEXT," + // 2: album
                "\"duration\" INTEGER NOT NULL ," + // 3: duration
                "\"title\" TEXT," + // 4: title
                "\"artist\" TEXT," + // 5: artist
                "\"playPath\" TEXT," + // 6: playPath
                "\"folder\" TEXT," + // 7: folder
                "\"titleKey\" TEXT," + // 8: titleKey
                "\"artistKey\" TEXT," + // 9: artistKey
                "\"picUrl\" TEXT," + // 10: picUrl
                "\"downUrl\" TEXT," + // 11: downUrl
                "\"tag\" INTEGER NOT NULL );"); // 12: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"l_music\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MusicInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSongId());
        stmt.bindLong(2, entity.getAlbumId());
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(3, album);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(6, artist);
        }
 
        String playPath = entity.getPlayPath();
        if (playPath != null) {
            stmt.bindString(7, playPath);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(8, folder);
        }
 
        String titleKey = entity.getTitleKey();
        if (titleKey != null) {
            stmt.bindString(9, titleKey);
        }
 
        String artistKey = entity.getArtistKey();
        if (artistKey != null) {
            stmt.bindString(10, artistKey);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(11, picUrl);
        }
 
        String downUrl = entity.getDownUrl();
        if (downUrl != null) {
            stmt.bindString(12, downUrl);
        }
        stmt.bindLong(13, entity.getTag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MusicInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSongId());
        stmt.bindLong(2, entity.getAlbumId());
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(3, album);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(6, artist);
        }
 
        String playPath = entity.getPlayPath();
        if (playPath != null) {
            stmt.bindString(7, playPath);
        }
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(8, folder);
        }
 
        String titleKey = entity.getTitleKey();
        if (titleKey != null) {
            stmt.bindString(9, titleKey);
        }
 
        String artistKey = entity.getArtistKey();
        if (artistKey != null) {
            stmt.bindString(10, artistKey);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(11, picUrl);
        }
 
        String downUrl = entity.getDownUrl();
        if (downUrl != null) {
            stmt.bindString(12, downUrl);
        }
        stmt.bindLong(13, entity.getTag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MusicInfo readEntity(Cursor cursor, int offset) {
        MusicInfo entity = new MusicInfo( //
            cursor.getLong(offset + 0), // songId
            cursor.getInt(offset + 1), // albumId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // album
            cursor.getInt(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // artist
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // playPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // folder
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // titleKey
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // artistKey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // picUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // downUrl
            cursor.getInt(offset + 12) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MusicInfo entity, int offset) {
        entity.setSongId(cursor.getLong(offset + 0));
        entity.setAlbumId(cursor.getInt(offset + 1));
        entity.setAlbum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.getInt(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArtist(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlayPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFolder(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitleKey(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setArtistKey(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPicUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDownUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTag(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MusicInfo entity, long rowId) {
        entity.setSongId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MusicInfo entity) {
        if(entity != null) {
            return entity.getSongId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MusicInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
